Project 9: All in One (REST API and Mongoose)

209. Mongoose Connection, Create User and Task Model with Proper Folder Structure -
    1. Create folder, install package.json by running command 'npm init -y'
    2. install Mongoose with command 'npm i mongoose'
    3. connect project with mongoose server and creating own server
    5. add then() and catch() method to show Connection message and errors
    5. run using 'npm index'
    6. creating userSchema with field - name, age, email, password
    7. create model for userSchema named User
    8. create taskSchema with field - description and isCompleted
    9. create model for taskSchema named Task
    10. create a folder named 'model'
    11. create two js file named 'user.js' and 'task.js' into 'model' folder
    12. move 'userSchema' code from index.js to user.js file
    13. move 'taskSchema' code from index.js to task.js file
    14. export both file and import them into index.js

210. Data Validation and Sanitization in User Model Part 1
    01. Set Validation to name field using object - type, minLength, maxLength, require
    02. Set Validation to age field using object - type and custom Validation using validate(value) with if conditions
    03. For email Validation install validator package using 'npm i validator', then import validator on 'user.js' file using require() method.
    04. Then Set Validation to email field using object - type and custom Validation using validator.isEmail(value) with if conditions
    05. Set Validation to password field using object - type, require
    06. To check all validation create a async function named db(), and add try() and catch() method
    07. In try() method, take a variable named user and pass all data like name, age, email and password there.
    08. Use await() to save data in mongodb
    09. do console.log(user)
    10. In catch() pass some err message

211. Data Validation and Sanitization in User Model Part 2
    01. for changing error message color in terminal for output, run 'npm i colors' and import colors in 'index.js'
    02. Sanitization: use 'trim: true' method to automatically cut spaces from strings before saving into database
    03. use 'unique: true' method to auto check if the mail is repeated or not and use 'lowercase: true' to ignore all uppercase to input

212. Data validation and Sanitization in Task Model
    01. In task model, set validation to description field using type, required method and Sanitization using trim method.
    02. set validation to isCompleted using type and Sanitization using default method.
    03. set values same as user model in 'index.js' on try() and catch() method, to see the result.

213. REST API Design with Express
    01. install express.js by running 'npm i express'
    02. import express to index
    03. add express using express app
    04. add port for the app by using 'const port = process.port.env || 4040'
